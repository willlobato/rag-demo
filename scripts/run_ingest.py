#!/usr/bin/env python3
# run_ingest.py
#!/usr/bin/env python3
"""
üìö RUN INGEST - PIPELINE DE INGEST√ÉO EDUCACIONAL PARA DOCUMENTOS RAG

Este script implementa o processo fundamental de ingest√£o de documentos em um sistema RAG,
demonstrando cada etapa do pipeline desde o carregamento at√© a indexa√ß√£o vetorial.

üéØ PROCESSO DE INGEST√ÉO EXPLICADO:

1Ô∏è‚É£ DOCUMENT LOADING (Carregamento):
   - Leitura de arquivos de diferentes formatos (TXT, MD, PDF)
   - Valida√ß√£o de encoding e integridade
   - Tratamento de erros e arquivos corrompidos

2Ô∏è‚É£ TEXT PREPROCESSING (Pr√©-processamento):
   - Limpeza de caracteres especiais e formata√ß√£o
   - Normaliza√ß√£o de espa√ßos e quebras de linha
   - Remo√ß√£o de metadados desnecess√°rios

3Ô∏è‚É£ DOCUMENT SPLITTING (Chunking):
   - Divis√£o em chunks de tamanho otimizado
   - Preserva√ß√£o de contexto sem√¢ntico
   - Overlap estrat√©gico entre chunks

4Ô∏è‚É£ EMBEDDING GENERATION (Vetoriza√ß√£o):
   - Convers√£o de texto em representa√ß√µes vetoriais
   - Uso de modelos pr√©-treinados (nomic-embed-text)
   - Normaliza√ß√£o dos vetores para busca eficiente

5Ô∏è‚É£ VECTOR INDEXING (Indexa√ß√£o):
   - Armazenamento no vector store (ChromaDB)
   - Cria√ß√£o de √≠ndices para busca r√°pida
   - Associa√ß√£o de metadados aos chunks

üìê CONCEITOS MATEM√ÅTICOS:

CHUNKING STRATEGY:
- Tamanho √≥timo: Balance entre contexto e precis√£o
- Overlap: Preserva informa√ß√£o que cruza fronteiras
- F√≥rmula: chunk_size = optimal_context_window / embedding_efficiency

EMBEDDING SPACE:
- Dimensionalidade: Tipicamente 768-1536 dimens√µes
- Normaliza√ß√£o: ||v|| = 1 para compara√ß√µes justas
- Distribui√ß√£o: Embeddings bem distribu√≠dos no espa√ßo n-dimensional

INDEXING EFFICIENCY:
- Complexidade: O(n log n) para constru√ß√£o do √≠ndice
- Busca: O(log n) para retrieval em √≠ndices otimizados
- Mem√≥ria: Linear com n√∫mero de documentos

üîß CONFIGURA√á√ïES IMPORTANTES:

CHUNK_SIZE (padr√£o: 500 caracteres):
- Pequeno (200-400): Alta precis√£o, contexto limitado
- M√©dio (500-800): Balanceado para uso geral
- Grande (1000+): Muito contexto, poss√≠vel ru√≠do

CHUNK_OVERLAP (padr√£o: 50 caracteres):
- Preserva informa√ß√£o que cruza fronteiras de chunks
- Evita perda de conceitos importantes
- Trade-off: redund√¢ncia vs completude

EMBEDDING_MODEL:
- nomic-embed-text: 768 dimens√µes, boa qualidade geral
- Alternativas: bge-large, e5-large, sentence-transformers
- Considera√ß√µes: Velocidade vs qualidade vs tamanho

üöÄ USO EDUCACIONAL:
Este script demonstra os fundamentos da prepara√ß√£o de dados para RAG,
incluindo as decis√µes de design e trade-offs envolvidos em cada etapa.
"""

import sys
from pathlib import Path

import sys
from pathlib import Path

# Adicionar o diret√≥rio pai ao path para importar rag_demo
sys.path.insert(0, str(Path(__file__).parent.parent))

from rag_demo import ingest_documents


def main():
    """Script principal para ingest√£o de documentos."""
    try:
        ingest_documents()
    except KeyboardInterrupt:
        print("\n[INFO] Processo interrompido pelo usu√°rio.")
    except Exception as e:
        print(f"[ERROR] Erro durante a ingest√£o: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

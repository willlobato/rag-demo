#!/usr/bin/env python3
"""
üéØ RAG QUERY RUNNER - Interface de Consulta Educacional

Sistema completo de execu√ß√£o de consultas RAG com explica√ß√µes pedag√≥gicas
detalhadas sobre cada componente do pipeline de processamento.

üìö FUNDAMENTOS EDUCACIONAIS:

Este script demonstra a implementa√ß√£o pr√°tica de um sistema RAG completo,
servindo como laborat√≥rio educacional para compreender como consultas s√£o
processadas e respostas s√£o geradas usando recupera√ß√£o de informa√ß√£o e
gera√ß√£o aumentada.

üéØ ARQUITETURA DO PIPELINE RAG:

1Ô∏è‚É£ QUERY PROCESSING (Processamento da Consulta):
   üìù CONCEITO: Primeira etapa de normaliza√ß√£o e prepara√ß√£o da entrada
   
   COMPONENTES:
   - Limpeza textual: Remo√ß√£o de caracteres especiais e normaliza√ß√£o
   - Detec√ß√£o de inten√ß√£o: Classifica√ß√£o do tipo de pergunta
   - Expans√£o sem√¢ntica: Adi√ß√£o de termos relacionados (opcional)
   - Valida√ß√£o de entrada: Verifica√ß√£o de formato e conte√∫do
   
   üî¨ T√âCNICAS APLICADAS:
   - Text preprocessing: Tokeniza√ß√£o e normaliza√ß√£o Unicode
   - Intent classification: Padr√µes regex ou ML para categoriza√ß√£o
   - Query expansion: Sin√¥nimos e termos relacionados via thesaurus
   - Input validation: Sanitiza√ß√£o e verifica√ß√£o de seguran√ßa

2Ô∏è‚É£ QUERY EMBEDDING (Vetoriza√ß√£o da Consulta):
   üìù CONCEITO: Convers√£o da pergunta em representa√ß√£o vetorial densa
   
   PROCESSO:
   - Tokeniza√ß√£o: Divis√£o em unidades sem√¢nticas
   - Encoding: Transforma√ß√£o em IDs de vocabul√°rio
   - Embedding: Mapeamento para espa√ßo vetorial denso
   - Normaliza√ß√£o: Ajuste para compatibilidade com √≠ndice
   
   üìê MATEM√ÅTICA:
   - Modelo usado: sentence-transformers/all-MiniLM-L6-v2
   - Dimens√µes: 384 (vetor denso)
   - Normaliza√ß√£o L2: ||v|| = 1 para compatibilidade cosseno
   - Representa√ß√£o: v ‚àà ‚Ñù¬≥‚Å∏‚Å¥, onde cada dimens√£o captura aspectos sem√¢nticos

3Ô∏è‚É£ SIMILARITY SEARCH (Busca por Similaridade):
   üìù CONCEITO: Recupera√ß√£o de documentos relevantes via proximidade vetorial
   
   ALGORITMO:
   - Indexa√ß√£o: Estrutura de dados otimizada (HNSW no ChromaDB)
   - Busca: Algoritmo de vizinhos mais pr√≥ximos (k-NN)
   - Ranking: Ordena√ß√£o por score de similaridade
   - Filtragem: Aplica√ß√£o de thresholds opcionais
   
   üìê MATEM√ÅTICA DA SIMILARIDADE:
   - M√©trica: Similaridade cosseno cos(Œ∏) = (q¬∑d) / (||q|| √ó ||d||)
   - Range: [0, 1] onde 1 = id√™ntico, 0 = ortogonal
   - Interpreta√ß√£o: √Çngulo entre vetores no espa√ßo sem√¢ntico
   - Complexidade: O(log n) com √≠ndice HNSW vs O(n) busca linear

4Ô∏è‚É£ CONTEXT ASSEMBLY (Montagem do Contexto):
   üìù CONCEITO: Combina√ß√£o inteligente dos documentos recuperados
   
   ESTRAT√âGIAS:
   - Concatena√ß√£o simples: Uni√£o sequencial dos chunks
   - Ordena√ß√£o h√≠brida: Relev√¢ncia + cronologia + autoridade
   - Deduplica√ß√£o: Remo√ß√£o de informa√ß√µes redundantes
   - Truncagem inteligente: Preserva√ß√£o dos chunks mais importantes
   
   üéöÔ∏è PAR√ÇMETROS:
   - Max tokens: Limite do contexto (normalmente 75% do window)
   - Ranking weights: Pesos para diferentes crit√©rios de ordena√ß√£o
   - Overlap handling: Tratamento de informa√ß√µes sobrepostas
   - Quality thresholds: Filtros de qualidade do conte√∫do

5Ô∏è‚É£ PROMPT ENGINEERING (Constru√ß√£o do Prompt):
   ÔøΩ CONCEITO: Design de instru√ß√µes estruturadas para o LLM
   
   COMPONENTES:
   - System prompt: Instru√ß√µes gerais e personalidade do assistente
   - Context injection: Inser√ß√£o dos documentos recuperados
   - Task specification: Defini√ß√£o clara da tarefa esperada
   - Output formatting: Especifica√ß√£o do formato de resposta
   
   üé® TEMPLATE STRUCTURE:
   ```
   SYSTEM: Voc√™ √© um assistente especializado...
   CONTEXT: [Documentos recuperados]
   QUERY: [Pergunta do usu√°rio]
   INSTRUCTIONS: Responda baseado apenas no contexto...
   ```

6Ô∏è‚É£ RESPONSE GENERATION (Gera√ß√£o da Resposta):
   üìù CONCEITO: Processamento pelo modelo de linguagem e p√≥s-processamento
   
   ETAPAS:
   - LLM processing: Gera√ß√£o via Ollama llama3
   - Response validation: Verifica√ß√£o de qualidade e relev√¢ncia
   - Post-processing: Formata√ß√£o e limpeza da sa√≠da
   - Confidence scoring: Avalia√ß√£o da confian√ßa na resposta
   
   ‚öôÔ∏è CONFIGURA√á√ïES:
   - Temperature: Controle de criatividade (0.0-1.0)
   - Max tokens: Limite de tamanho da resposta
   - Stop sequences: Tokens de parada para controle de gera√ß√£o
   - Repetition penalty: Preven√ß√£o de repeti√ß√µes excessivas

üìä M√âTRICAS E AVALIA√á√ÉO:

RETRIEVAL METRICS:
- Precision@K: Propor√ß√£o de documentos relevantes nos top-K
- Recall@K: Cobertura dos documentos relevantes
- MRR (Mean Reciprocal Rank): Qualidade do ranking
- NDCG: Normalized Discounted Cumulative Gain

GENERATION METRICS:
- BLEU Score: Similaridade com respostas de refer√™ncia
- ROUGE Score: Overlap de n-gramas
- BERTScore: Similaridade sem√¢ntica via embeddings
- Human evaluation: Avalia√ß√£o manual de qualidade

üîß CONFIGURA√á√ïES AVAN√áADAS:

RETRIEVAL PARAMETERS:
- k: N√∫mero de documentos recuperados (padr√£o: 5)
  ‚Ä¢ Trade-off: Mais contexto vs mais ru√≠do
  ‚Ä¢ Recomenda√ß√£o: 3-10 dependendo da complexidade do dom√≠nio
  
- similarity_threshold: Filtro de relev√¢ncia (padr√£o: 0.0)
  ‚Ä¢ Uso: Eliminar documentos pouco relevantes
  ‚Ä¢ Valores t√≠picos: 0.3-0.7 dependendo da precis√£o necess√°ria
  
- max_context_length: Limite de tokens do contexto
  ‚Ä¢ Preven√ß√£o: Overflow no modelo de linguagem
  ‚Ä¢ Estrat√©gia: Truncagem dos documentos menos relevantes

GENERATION PARAMETERS:
- temperature: Controle de aleatoriedade
  ‚Ä¢ 0.0: Determin√≠stica, mais precisa
  ‚Ä¢ 1.0: Criativa, mais variada
  
- top_p: Nucleus sampling para controle de qualidade
- presence_penalty: Incentivo √† diversidade vocabular
- frequency_penalty: Redu√ß√£o de repeti√ß√µes

üé≠ TIPOS DE CONSULTAS E ESTRAT√âGIAS:

FACTUAL QUERIES (Consultas Factuais):
- Exemplo: "Qual √© a capital do Brasil?"
- Estrat√©gia: Busca por chunks com informa√ß√µes espec√≠ficas
- Expectativa: Resposta direta e precisa
- Avalia√ß√£o: Exatid√£o factual

PROCEDURAL QUERIES (Consultas Procedimentais):
- Exemplo: "Como fazer login no sistema?"
- Estrat√©gia: Recuperar documenta√ß√£o de processos
- Expectativa: Sequ√™ncia clara de passos
- Avalia√ß√£o: Completude e clareza das instru√ß√µes

COMPARATIVE QUERIES (Consultas Comparativas):
- Exemplo: "Qual a diferen√ßa entre X e Y?"
- Estrat√©gia: Recuperar documentos sobre ambos os temas
- Expectativa: An√°lise balanceada e estruturada
- Avalia√ß√£o: Imparcialidade e abrang√™ncia

EXPLANATORY QUERIES (Consultas Explicativas):
- Exemplo: "Por que isso acontece?"
- Estrat√©gia: Buscar contexto conceitual amplo
- Expectativa: Explica√ß√£o detalhada com fundamentos
- Avalia√ß√£o: Profundidade e clareza conceitual

EXPLORATORY QUERIES (Consultas Explorat√≥rias):
- Exemplo: "Me fale sobre intelig√™ncia artificial"
- Estrat√©gia: Recupera√ß√£o diversificada de aspectos
- Expectativa: Vis√£o abrangente do t√≥pico
- Avalia√ß√£o: Cobertura e organiza√ß√£o das informa√ß√µes

üß™ LABORAT√ìRIO EDUCACIONAL:

EXPERIMENTOS SUGERIDOS:
1. Varia√ß√£o do par√¢metro K: Observe como diferentes n√∫meros de documentos
   afetam a qualidade e relev√¢ncia das respostas
   
2. Ajuste de similarity_threshold: Teste diferentes limiares para
   entender o trade-off entre precis√£o e recall
   
3. Compara√ß√£o de embeddings: Experimente diferentes modelos de embedding
   para ver como afetam a recupera√ß√£o
   
4. An√°lise de prompt templates: Modifique os templates para entender
   como o formato afeta as respostas

DEBUGGING E MONITORAMENTO:
- Log de documentos recuperados para an√°lise de relev√¢ncia
- Medi√ß√£o de tempos de resposta em cada etapa
- An√°lise de distribui√ß√£o de scores de similaridade
- Tracking de tipos de consulta mais comuns

üöÄ OBJETIVOS PEDAG√ìGICOS:

Este script serve como:
1. Demonstra√ß√£o pr√°tica de um pipeline RAG completo
2. Laborat√≥rio para experimenta√ß√£o com par√¢metros
3. Base para compreens√£o de trade-offs em sistemas de recupera√ß√£o
4. Exemplo de boas pr√°ticas em implementa√ß√£o de chatbots
5. Ferramenta para an√°lise de qualidade de respostas

O c√≥digo √© projetado para ser educativo, mostrando cada decis√£o de design
e permitindo f√°cil experimenta√ß√£o com diferentes configura√ß√µes.
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio pai ao path para importar rag_demo
sys.path.insert(0, str(Path(__file__).parent.parent))

from rag_demo import query_rag


def main():
    """Script principal para consultas RAG."""
    question = "O que √© RAG e como ele funciona?"
    
    if len(sys.argv) > 1:
        question = " ".join(sys.argv[1:]).strip()
    
    try:
        response = query_rag(question)
        print(response)
    except KeyboardInterrupt:
        print("\n[INFO] Consulta interrompida pelo usu√°rio.")
    except Exception as e:
        print(f"[ERROR] Erro durante a consulta: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

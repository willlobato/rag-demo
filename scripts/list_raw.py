#!/usr/bin/env python3
"""
üìÑ LIST RAW - VISUALIZA√á√ÉO EDUCACIONAL DE DADOS BRUTOS DO VECTOR STORE

Este script oferece acesso direto aos dados brutos armazenados no ChromaDB,
proporcionando uma compreens√£o profunda de como as informa√ß√µes s√£o
estruturadas e organizadas internamente no sistema RAG.

üéØ FUNCIONALIDADES EDUCACIONAIS:

üîç EXPLORA√á√ÉO DE DADOS BRUTOS:
- Acesso direto aos dados do ChromaDB
- Visualiza√ß√£o de embeddings, documentos e metadados
- Estrutura interna de armazenamento
- Relacionamentos entre diferentes componentes

üìä AN√ÅLISE ESTRUTURAL:
- Como embeddings s√£o armazenados (arrays num√©ricos)
- Organiza√ß√£o de metadados (dicion√°rios estruturados)
- Textos originais vs textos processados
- IDs √∫nicos e sistemas de refer√™ncia

üóÉÔ∏è FORMATO DE DADOS:
- Collections: Agrupamentos l√≥gicos
- Documents: Arrays de strings (chunks de texto)
- Embeddings: Arrays de floats (representa√ß√µes vetoriais)
- Metadatas: Arrays de dicion√°rios (informa√ß√µes auxiliares)
- IDs: Identificadores √∫nicos para cada chunk

üìñ CONCEITOS DEMONSTRADOS:

DATABASE STRUCTURE:
- Schema flex√≠vel do ChromaDB
- Separa√ß√£o entre dados e √≠ndices
- Efici√™ncia de armazenamento
- Estrat√©gias de compress√£o

DATA RELATIONSHIPS:
- 1:1 entre documento, embedding e metadata
- Preserva√ß√£o de ordem e consist√™ncia
- Integridade referencial
- Versionamento de dados

STORAGE EFFICIENCY:
- Otimiza√ß√µes de espa√ßo em disco
- √çndices para busca r√°pida
- Compress√£o de embeddings
- Metadados estruturados vs flex√≠veis

üî¨ INSIGHTS T√âCNICOS:

RAW DATA FORMAT:
- Embeddings como arrays numpy
- Metadados como JSON estruturado
- Textos em encoding UTF-8
- IDs como strings ou UUIDs

PERFORMANCE IMPLICATIONS:
- Tamanho dos embeddings vs velocidade
- Quantidade de metadados vs overhead
- Estrat√©gias de indexa√ß√£o
- Trade-offs mem√≥ria vs disco

DEBUGGING CAPABILITIES:
- Valida√ß√£o de integridade dos dados
- Detec√ß√£o de corrup√ß√£o
- An√°lise de inconsist√™ncias
- Verifica√ß√£o de duplicatas

üöÄ USO EDUCACIONAL:
Este script √© essencial para compreender "under the hood" como
um vector store funciona, revelando os detalhes de implementa√ß√£o
que ficam abstra√≠dos nas interfaces de alto n√≠vel.

üí° CASOS DE USO:
- Debug de problemas de indexa√ß√£o
- An√°lise de qualidade dos dados
- Compreens√£o de limita√ß√µes
- Otimiza√ß√£o de performance
- Auditoria de dados
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio pai ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from langchain_chroma import Chroma
from rag_demo.config import PERSIST_DIR, COLLECTION_NAME


def main():
    """Lista chunks e embeddings de forma simples e direta."""
    vect = Chroma(
        collection_name=COLLECTION_NAME,
        persist_directory=PERSIST_DIR,
    )

    data = vect.get(include=["documents", "metadatas", "embeddings"])
    total = len(data["ids"])
    print(f"[INFO] Total de chunks no √≠ndice: {total}\n")

    if total == 0:
        print("[INFO] Nenhum documento encontrado. Execute 'python scripts/run_ingest.py' primeiro.")
        return

    for i, (doc, meta, emb) in enumerate(
        zip(data["documents"], data["metadatas"], data["embeddings"]), 1
    ):
        print(f"--- Chunk {i} ---")
        print(f"Fonte: {meta.get('source', 'desconhecido')}")
        print(f"Texto:\n{doc}\n")
        print(f"Embedding (primeiros 10 valores): {emb[:10]}\n")


if __name__ == "__main__":
    main()

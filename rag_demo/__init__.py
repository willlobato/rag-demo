#!/usr/bin/env python3
"""
üéØ RAG DEMO CORE PACKAGE - Arquitetura Modular Educacional

Pacote principal que implementa a arquitetura core do sistema RAG, fornecendo
uma interface limpa e modular para todas as funcionalidades de recupera√ß√£o 
e gera√ß√£o aumentada.

üìö FUNDAMENTA√á√ÉO ARQUITETURAL:

Este m√≥dulo implementa o padr√£o de arquitetura modular para sistemas RAG,
separando responsabilidades em m√≥dulos especializados e fornecendo uma
API unificada para intera√ß√£o com todas as funcionalidades do sistema.

üèóÔ∏è ARQUITETURA DO PACKAGE:

O package rag_demo segue princ√≠pios de design modular bem estabelecidos:

1Ô∏è‚É£ SEPARA√á√ÉO DE RESPONSABILIDADES:
   üìù CONCEITO: Cada m√≥dulo tem uma responsabilidade espec√≠fica e bem definida
   
   ESTRUTURA MODULAR:
   - config.py: Configura√ß√µes centralizadas e gerenciamento de ambiente
   - ingest.py: Pipeline de ingest√£o e processamento de documentos
   - rag.py: Engine de recupera√ß√£o e gera√ß√£o de respostas
   - utils.py: Utilit√°rios compartilhados e fun√ß√µes auxiliares
   - __init__.py: Interface p√∫blica e controle de exporta√ß√µes

2Ô∏è‚É£ INTERFACE P√öBLICA LIMPA:
   üìù CONCEITO: API simplificada que esconde complexidade interna
   
   FUN√á√ïES EXPORTADAS:
   - ingest_documents(): Pipeline completo de ingest√£o
   - query_rag(): Interface principal de consulta
   - search_similar_docs(): Busca sem√¢ntica avan√ßada
   - list_documents(): Explora√ß√£o do √≠ndice criado
   
   üéØ VANTAGENS:
   - Abstra√ß√£o da complexidade interna
   - Interface consistente para todos os usos
   - Facilita manuten√ß√£o e evolu√ß√£o
   - Permite reutiliza√ß√£o em diferentes contextos

3Ô∏è‚É£ GERENCIAMENTO DE DEPEND√äNCIAS:
   üìù CONCEITO: Controle expl√≠cito de importa√ß√µes e exporta√ß√µes
   
   ESTRAT√âGIA DE IMPORTA√á√ÉO:
   - Importa√ß√µes expl√≠citas de m√≥dulos internos
   - Configura√ß√µes carregadas automaticamente
   - Fun√ß√µes principais disponibilizadas diretamente
   - Controle de namespace via __all__

üìä PADR√ïES DE DESIGN APLICADOS:

FACADE PATTERN:
- Simplifica interface para subsistema complexo
- Unifica acesso a m√∫ltiplos m√≥dulos especializados
- Reduz acoplamento entre cliente e implementa√ß√£o

MODULE PATTERN:
- Encapsula funcionalidades relacionadas
- Controla visibilidade de componentes internos
- Facilita testing e mocking

DEPENDENCY INJECTION:
- Configura√ß√µes injetadas via config.py
- Facilita testing com configura√ß√µes alternativas
- Permite customiza√ß√£o sem modificar c√≥digo

üéØ CASOS DE USO EDUCACIONAIS:

APRENDIZAGEM DE ARQUITETURA:
- Demonstra padr√µes de design em Python
- Mostra organiza√ß√£o de packages Python
- Exemplifica separa√ß√£o de responsabilidades

DESENVOLVIMENTO MODULAR:
- Template para sistemas similares
- Base para extens√µes e customiza√ß√µes
- Refer√™ncia para boas pr√°ticas

INTEGRA√á√ÉO SISTEM√ÅTICA:
- Interface √∫nica para m√∫ltiplas funcionalidades
- Ponto de entrada consistente para scripts
- Base para APIs e interfaces externas

üöÄ VALOR EDUCACIONAL:

Este arquivo demonstra:
1. Como estruturar packages Python profissionalmente
2. Aplica√ß√£o de padr√µes de design em sistemas reais
3. Cria√ß√£o de APIs limpas e reutiliz√°veis
4. Separa√ß√£o efetiva de responsabilidades
5. Gerenciamento de depend√™ncias em Python

O design modular facilita aprendizagem, manuten√ß√£o e extens√£o do sistema,
servindo como exemplo de arquitetura bem estruturada para sistemas RAG.
"""

from .config import *
from .ingest import ingest_documents
from .rag import query_rag, search_similar_docs, list_documents

__version__ = "0.1.0"
__author__ = "Will Lobato"
__description__ = "Sistema RAG Educacional com Ollama e ChromaDB"

# Exportar fun√ß√µes principais
__all__ = [
    "ingest_documents",
    "query_rag", 
    "search_similar_docs",
    "list_documents"
]

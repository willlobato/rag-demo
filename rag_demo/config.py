#!/usr/bin/env python3
"""
‚öôÔ∏è CONFIGURATION MANAGEMENT - Sistema de Configura√ß√£o Educacional

M√≥dulo centralizado de configura√ß√£o que implementa boas pr√°ticas de gerenciamento
de configura√ß√µes para sistemas RAG, demonstrando padr√µes profissionais de
configura√ß√£o baseada em ambiente.

üìö FUNDAMENTA√á√ÉO CONCEITUAL:

Este m√≥dulo aplica o padr√£o "Configuration as Code" e "Environment-based Configuration"
para criar um sistema flex√≠vel e robusto de gerenciamento de configura√ß√µes que
facilita desenvolvimento, testing e deployment em diferentes ambientes.

üéØ ARQUITETURA DE CONFIGURA√á√ÉO:

1Ô∏è‚É£ ENVIRONMENT-BASED CONFIGURATION:
   üìù CONCEITO: Configura√ß√µes adapt√°veis baseadas em vari√°veis de ambiente
   
   VANTAGENS:
   - Flexibilidade entre ambientes (dev/test/prod)
   - Seguran√ßa (credenciais n√£o ficam no c√≥digo)
   - Facilita CI/CD e containeriza√ß√£o
   - Permite configura√ß√£o externa sem rebuild
   
   IMPLEMENTA√á√ÉO:
   - os.getenv() com valores padr√£o
   - Type casting autom√°tico (int, float, bool)
   - Valida√ß√£o impl√≠cita de tipos
   - Fallbacks seguros para desenvolvimento

2Ô∏è‚É£ SEPARATION OF CONCERNS:
   üìù CONCEITO: Agrupamento l√≥gico de configura√ß√µes por responsabilidade
   
   CATEGORIAS IMPLEMENTADAS:
   - DIRET√ìRIOS: Paths para dados e persist√™ncia
   - CHROMADB: Configura√ß√µes do banco vetorial
   - MODELOS OLLAMA: Especifica√ß√£o de modelos de IA
   - CHUNKING: Par√¢metros de fragmenta√ß√£o de texto
   - RETRIEVAL: Configura√ß√µes de busca e recupera√ß√£o
   - LLM: Par√¢metros de gera√ß√£o de linguagem
   - OPERACIONAIS: Configura√ß√µes de opera√ß√£o (reset, debug)

3Ô∏è‚É£ TWELVE-FACTOR APP COMPLIANCE:
   üìù CONCEITO: Seguimento dos princ√≠pios de aplica√ß√µes cloud-native
   
   PRINC√çPIOS APLICADOS:
   - Config Factor: Configura√ß√£o via ambiente
   - Backing Services: URLs e credenciais externalizadas
   - Port Binding: Configura√ß√£o de portas via env vars
   - Disposability: Startup r√°pido com configs simples

üìä PADR√ïES DE CONFIGURA√á√ÉO APLICADOS:

CONFIGURATION HIERARCHY:
```
1. Environment Variables (maior prioridade)
2. Default Values (fallback seguro)
3. Type Conversion (int, float, bool autom√°tico)
4. Validation (tipos e valores sensatos)
```

NAMING CONVENTION:
- SNAKE_CASE para vari√°veis Python
- SCREAMING_SNAKE_CASE para environment variables
- Prefixos l√≥gicos por categoria
- Nomes descritivos e n√£o amb√≠guos

DEFAULT VALUE STRATEGY:
- Valores sensatos para desenvolvimento local
- Configura√ß√µes seguras (temperatura=0, n√£o reset)
- Paths relativos para portabilidade
- Modelos padr√£o dispon√≠veis localmente

üîß CONFIGURA√á√ïES DETALHADAS:

DIRET√ìRIOS E PERSIST√äNCIA:
- DATA_DIR: Localiza√ß√£o dos documentos fonte
- PERSIST_DIR: Diret√≥rio do banco vetorial ChromaDB
- Estrat√©gia: Paths relativos para portabilidade

MODELOS DE IA:
- LLM_MODEL: Modelo de linguagem para gera√ß√£o
- EMB_MODEL: Modelo de embeddings para vetoriza√ß√£o
- Padr√£o: llama3 + nomic-embed-text (dispon√≠veis via Ollama)

PROCESSAMENTO DE TEXTO:
- CHUNK_SIZE: Tamanho dos fragmentos de texto
- CHUNK_OVERLAP: Sobreposi√ß√£o entre chunks
- Trade-off: Granularidade vs contexto

RECUPERA√á√ÉO DE INFORMA√á√ÉO:
- RETRIEVAL_K: N√∫mero de documentos recuperados
- COLLECTION_NAME: Nome da cole√ß√£o no ChromaDB
- Balance: Recall vs precis√£o vs performance

GERA√á√ÉO DE LINGUAGEM:
- TEMPERATURE: Criatividade vs determinismo (0.0-1.0)
- Padr√£o: 0 para respostas determin√≠sticas

OPERA√á√ïES:
- RESET_CHROMA: Flag para reset do √≠ndice
- Seguran√ßa: Padr√£o false para evitar perda acidental

üß™ CASOS DE USO EDUCACIONAIS:

DESENVOLVIMENTO LOCAL:
```python
# Configura√ß√£o autom√°tica para desenvolvimento
# Todos os valores padr√£o funcionam out-of-the-box
```

EXPERIMENTA√á√ÉO:
```bash
# Teste com diferentes par√¢metros
export CHUNK_SIZE=1000
export RETRIEVAL_K=10
export TEMPERATURE=0.3
```

AMBIENTE DE PRODU√á√ÉO:
```bash
# Configura√ß√£o otimizada para produ√ß√£o
export DATA_DIR=/app/data
export PERSIST_DIR=/app/db
export LLM_MODEL=llama3:70b
```

TESTING AUTOMATIZADO:
```bash
# Configura√ß√£o para testes
export RESET_CHROMA=1
export COLLECTION_NAME=test-collection
```

üìà MONITORAMENTO E DEBUGGING:

CONFIGURA√á√ÉO VIS√çVEL:
- Todas as configs s√£o facilmente audit√°veis
- Valores ativos podem ser inspecionados em runtime
- Environment variables documentadas in-line

VALIDA√á√ÉO IMPL√çCITA:
- Type conversion autom√°tica previne erros
- Valores padr√£o sempre v√°lidos
- Fallbacks seguros para todos os par√¢metros

FLEXIBILIDADE OPERACIONAL:
- Mudan√ßas sem restart (para algumas configs)
- Override seletivo de par√¢metros
- Configura√ß√£o por feature flags

üöÄ VALOR EDUCACIONAL:

Este m√≥dulo demonstra:
1. Padr√µes profissionais de gerenciamento de configura√ß√£o
2. Aplica√ß√£o dos princ√≠pios Twelve-Factor App
3. Estrat√©gias de configura√ß√£o environment-based
4. Type safety e validation em Python
5. Organiza√ß√£o modular de configura√ß√µes

O design facilita experimenta√ß√£o educacional, deployment profissional
e manuten√ß√£o de longo prazo, servindo como template para sistemas
de configura√ß√£o robustos.
"""

import os
from pathlib import Path

# Diret√≥rios e Persist√™ncia
DATA_DIR = Path(os.getenv("DATA_DIR", "data"))
PERSIST_DIR = os.getenv("PERSIST_DIR", "db")

# ChromaDB Configuration
COLLECTION_NAME = os.getenv("COLLECTION_NAME", "demo-rag")

# Modelos Ollama
LLM_MODEL = os.getenv("LLM_MODEL", "llama3")
EMB_MODEL = os.getenv("EMB_MODEL", "nomic-embed-text")

# Configura√ß√µes de Chunking (Fragmenta√ß√£o de Texto)
CHUNK_SIZE = int(os.getenv("CHUNK_SIZE", "500"))
CHUNK_OVERLAP = int(os.getenv("CHUNK_OVERLAP", "80"))

# Configura√ß√µes de Retrieval (Recupera√ß√£o)
RETRIEVAL_K = int(os.getenv("RETRIEVAL_K", "4"))

# Configura√ß√µes do LLM (Large Language Model)
TEMPERATURE = float(os.getenv("TEMPERATURE", "0"))

# Configura√ß√µes Operacionais
RESET_CHROMA = os.getenv("RESET_CHROMA", "0") == "1"

# Ollama (opcional)
OLLAMA_BASE_URL = os.getenv("OLLAMA_BASE_URL", "http://localhost:11434")

#!/usr/bin/env python3
"""
üõ†Ô∏è UTILITIES MODULE - Fun√ß√µes Utilit√°rias Educacionais para RAG

Conjunto de fun√ß√µes auxiliares que implementam opera√ß√µes fundamentais
para carregamento, processamento e formata√ß√£o de documentos em sistemas RAG,
demonstrando boas pr√°ticas de manipula√ß√£o de dados textuais.

üìö FUNDAMENTA√á√ÉO T√âCNICA:

Este m√≥dulo encapsula opera√ß√µes de baixo n√≠vel essenciais para sistemas RAG,
aplicando princ√≠pios de engenharia de software para criar fun√ß√µes reutiliz√°veis,
robustas e bem documentadas para manipula√ß√£o de documentos.

üéØ RESPONSABILIDADES DO M√ìDULO:

1Ô∏è‚É£ DOCUMENT LOADING (Carregamento de Documentos):
   üìù CONCEITO: Abstra√ß√£o unificada para diferentes formatos de documento
   
   FORMATOS SUPORTADOS:
   - TXT: Texto plano simples
   - MD: Markdown com preserva√ß√£o de estrutura
   - PDF: Documentos com extra√ß√£o de texto via PyPDF
   
   üîß ESTRAT√âGIAS DE CARREGAMENTO:
   - Encoding Detection: UTF-8 com fallback graceful
   - Error Handling: Continua processamento mesmo com falhas
   - Metadata Preservation: Mant√©m informa√ß√µes de fonte
   - Recursive Search: Busca em subdiret√≥rios automaticamente

2Ô∏è‚É£ DATA CONVERSION (Convers√£o de Dados):
   üìù CONCEITO: Transforma√ß√£o de dados brutos em objetos LangChain Document
   
   PROCESSO:
   - File System Scanning: Busca recursiva por arquivos
   - Content Extraction: Leitura e parsing do conte√∫do
   - Document Creation: Cria√ß√£o de objetos LangChain padronizados
   - Metadata Injection: Adi√ß√£o de informa√ß√µes contextuais
   
   üìä ESTRUTURA Document:
   ```python
   Document(
       page_content="Texto extra√≠do do documento",
       metadata={"source": "caminho/para/arquivo.txt"}
   )
   ```

3Ô∏è‚É£ FALLBACK MECHANISMS (Mecanismos de Fallback):
   üìù CONCEITO: Estrat√©gias de recupera√ß√£o para ambientes sem dados
   
   DOCUMENTOS DE EXEMPLO:
   - Conte√∫do educacional sobre RAG
   - Exemplos pr√°ticos de conceitos
   - Base m√≠nima para funcionamento
   - Template para novos usu√°rios

4Ô∏è‚É£ TEXT FORMATTING (Formata√ß√£o de Texto):
   üìù CONCEITO: Prepara√ß√£o de contexto para prompts LLM
   
   ESTRAT√âGIAS:
   - Document Concatenation: Uni√£o de m√∫ltiplos documentos
   - Source Attribution: Cita√ß√£o de fontes para rastreabilidade
   - Separator Standards: Delimitadores consistentes
   - Context Optimization: Formata√ß√£o otimizada para LLMs

üìä PADR√ïES DE DESIGN APLICADOS:

STRATEGY PATTERN:
- Diferentes estrat√©gias para diferentes formatos
- Extensibilidade para novos tipos de documento
- Isolamento de complexidade por tipo

FACTORY PATTERN:
- Cria√ß√£o padronizada de objetos Document
- Configura√ß√£o centralizada de metadados
- Abstra√ß√£o da complexidade de instancia√ß√£o

ERROR HANDLING PATTERN:
- Graceful degradation para falhas individuais
- Logging estruturado de problemas
- Continuidade de processamento

üîß IMPLEMENTA√á√ïES DETALHADAS:

LOAD_TXT_MD():
```python
# Busca recursiva por arquivos .txt e .md
# Leitura com encoding UTF-8 e error handling
# Cria√ß√£o de Document com metadata de source
# Continua processamento mesmo com falhas
```

LOAD_PDFS():
```python
# Utiliza√ß√£o do PyPDFLoader para extra√ß√£o
# Processamento p√°gina por p√°gina
# Preserva√ß√£o de metadata original
# Error handling para PDFs corrompidos
```

GET_EXAMPLE_DOCUMENTS():
```python
# Documentos m√≠nimos para demonstra√ß√£o
# Conte√∫do educacional sobre RAG
# Permite funcionamento out-of-the-box
# Base para experimenta√ß√£o inicial
```

FORMAT_DOCS():
```python
# Concatena√ß√£o inteligente de documentos
# Separadores padronizados (---)
# Source attribution autom√°tica
# Otimiza√ß√£o para context window
```

üß™ CASOS DE USO EDUCACIONAIS:

DESENVOLVIMENTO LOCAL:
```python
# Carregamento autom√°tico de arquivos locais
# Fallback para documentos de exemplo
# Experimenta√ß√£o sem setup complexo
```

EXPERIMENTA√á√ÉO COM FORMATOS:
```python
# Teste com diferentes tipos de arquivo
# An√°lise de qualidade de extra√ß√£o
# Compara√ß√£o de performance por formato
```

AN√ÅLISE DE QUALIDADE:
```python
# Valida√ß√£o de encoding de documentos
# Detec√ß√£o de problemas de extra√ß√£o
# Auditoria de metadados
```

DESENVOLVIMENTO DE PIPELINES:
```python
# Base para pipelines de processamento
# Template para novos formatos
# Integra√ß√£o com sistemas externos
```

‚ö° OTIMIZA√á√ïES DE PERFORMANCE:

LAZY LOADING:
- Carregamento sob demanda
- Evita consumo desnecess√°rio de mem√≥ria
- Processamento incremental

ERROR RESILIENCE:
- Continua processamento com falhas parciais
- Logging de problemas sem interrup√ß√£o
- Maximiza aproveitamento de dados v√°lidos

ENCODING ROBUSTNESS:
- UTF-8 como padr√£o
- Fallback graceful para outros encodings
- Tratamento de caracteres especiais

üö® ROBUSTEZ E CONFIABILIDADE:

FAULT TOLERANCE:
- Error handling em cada opera√ß√£o de I/O
- Graceful degradation para falhas
- Continuidade de processamento
- Logging detalhado de problemas

VALIDATION:
- Verifica√ß√£o de formatos suportados
- Valida√ß√£o de integridade de arquivos
- Confirma√ß√£o de encoding v√°lido
- Verifica√ß√£o de metadata

EXTENSIBILITY:
- Arquitetura plug√°vel para novos formatos
- Interface consistente para all loaders
- Padr√µes de metadata padronizados
- Facilita adi√ß√£o de novos tipos

üöÄ VALOR EDUCACIONAL:

Este m√≥dulo demonstra:
1. Padr√µes de design para sistemas robustos
2. Manipula√ß√£o segura de arquivos e encoding
3. Abstra√ß√£o efetiva de complexidade
4. Error handling em sistemas de produ√ß√£o
5. Extensibilidade e reutiliza√ß√£o de c√≥digo

As fun√ß√µes utilit√°rias servem como building blocks fundamentais
para sistemas RAG, mostrando como implementar opera√ß√µes de base
de forma robusta e reutiliz√°vel.
"""

from pathlib import Path
from typing import List
from langchain_core.documents import Document
from langchain_community.document_loaders import PyPDFLoader


def load_txt_md(data_dir: Path) -> List[Document]:
    """
    Carrega arquivos TXT e MD do diret√≥rio especificado com busca recursiva.
    
    üìÅ FUNCIONALIDADE:
    - Busca recursiva em todos os subdiret√≥rios
    - Suporte para .txt e .md simultaneamente
    - Encoding UTF-8 com error handling graceful
    - Preserva√ß√£o de caminho original como metadata
    
    üîß ESTRAT√âGIA DE LOADING:
    - rglob("*"): Busca recursiva em toda √°rvore
    - Filtragem por extens√£o case-insensitive
    - read_text() com errors="ignore" para robustez
    - Continuidade mesmo com falhas individuais
    
    Args:
        data_dir: Diret√≥rio raiz para busca de documentos
        
    Returns:
        List[Document]: Lista de documentos carregados com metadata
    """
    docs = []
    for p in data_dir.rglob("*"):
        if p.is_file() and p.suffix.lower() in {".txt", ".md"}:
            try:
                text = p.read_text(encoding="utf-8", errors="ignore")
                if text.strip():  # Ignora arquivos vazios
                    docs.append(Document(
                        page_content=text, 
                        metadata={"source": str(p.relative_to(data_dir))}
                    ))
            except Exception as e:
                print(f"[WARN] Falha ao ler arquivo {p}: {e}")
    
    print(f"[INFO] Carregados {len(docs)} documentos TXT/MD")
    return docs


def load_pdfs(data_dir: Path) -> List[Document]:
    """
    Carrega arquivos PDF do diret√≥rio especificado usando PyPDFLoader.
    
    üìñ FUNCIONALIDADE:
    - Extra√ß√£o de texto p√°gina por p√°gina
    - Preserva√ß√£o de estrutura original do PDF
    - Metadata com informa√ß√£o de fonte
    - Error handling para PDFs corrompidos
    
    üîß ESTRAT√âGIA DE EXTRA√á√ÉO:
    - PyPDFLoader para parsing robusto
    - Processamento p√°gina por p√°gina
    - Metadata injection consistente
    - Continua com falhas individuais
    
    Args:
        data_dir: Diret√≥rio para busca de arquivos PDF
        
    Returns:
        List[Document]: Lista de documentos extra√≠dos de PDFs
    """
    docs = []
    pdf_files = list(data_dir.rglob("*.pdf"))
    
    for p in pdf_files:
        try:
            loader = PyPDFLoader(str(p))
            pdf_docs = loader.load()
            
            for doc in pdf_docs:
                # Atualiza metadata com caminho relativo
                doc.metadata = {
                    "source": str(p.relative_to(data_dir)),
                    "page": doc.metadata.get("page", "unknown")
                }
                docs.append(doc)
                
        except Exception as e:
            print(f"[WARN] Falha ao ler PDF {p}: {e}")
    
    print(f"[INFO] Carregados {len(docs)} documentos de {len(pdf_files)} PDFs")
    return docs


def get_example_documents() -> List[Document]:
    """
    Retorna documentos de exemplo para demonstra√ß√£o e fallback.
    
    üìö CONTE√öDO EDUCACIONAL:
    - Conceitos fundamentais de RAG
    - Exemplos pr√°ticos de implementa√ß√£o
    - Casos de uso comuns
    - Base para experimenta√ß√£o inicial
    
    üéØ CASOS DE USO:
    - Fallback quando data/ est√° vazio
    - Demonstra√ß√£o out-of-the-box
    - Material educacional b√°sico
    - Template para novos usu√°rios
    
    Returns:
        List[Document]: Documentos de exemplo com conte√∫do educacional
    """
    return [
        Document(
            page_content=(
                "RAG (Retrieval-Augmented Generation) √© uma t√©cnica que combina "
                "busca vetorial com modelos de linguagem. O processo envolve: "
                "1) Dividir documentos em chunks, 2) Criar embeddings vetoriais, "
                "3) Recuperar chunks relevantes para uma consulta, "
                "4) Usar o contexto recuperado para gerar respostas precisas. "
                "Esta abordagem melhora significativamente a qualidade das respostas "
                "fornecendo informa√ß√£o contextual espec√≠fica ao modelo de linguagem."
            ),
            metadata={"source": "exemplo_rag_conceitos.md"},
        ),
        Document(
            page_content=(
                "Exemplo pr√°tico de otimiza√ß√£o: Sistema de login com paralelismo "
                "e cache distribu√≠do usando Infinispan. A estrat√©gia envolve "
                "cache L1 local, cache L2 distribu√≠do, invalida√ß√£o autom√°tica, "
                "e fallback para banco de dados. M√©tricas mostram redu√ß√£o de "
                "98% na lat√™ncia e aumento de 15x no throughput comparado √† "
                "implementa√ß√£o b√°sica sem cache."
            ),
            metadata={"source": "exemplo_otimizacao_sistema.md"},
        ),
        Document(
            page_content=(
                "Configura√ß√£o de embedding models: nomic-embed-text oferece "
                "excelente balance entre qualidade e performance para portugu√™s. "
                "Alternativas incluem: all-MiniLM-L6-v2 (r√°pido, 384D), "
                "all-mpnet-base-v2 (qualidade, 768D), bge-large (sota, 1024D). "
                "Escolha baseada em: velocidade necess√°ria, qualidade desejada, "
                "recursos computacionais dispon√≠veis, e idioma do conte√∫do."
            ),
            metadata={"source": "exemplo_configuracao_embeddings.md"},
        ),
    ]


def format_docs(docs: List[Document]) -> str:
    """
    Formata lista de documentos para uso em prompts RAG.
    
    üìù ESTRAT√âGIA DE FORMATA√á√ÉO:
    - Concatena√ß√£o com separadores padronizados
    - Source attribution para rastreabilidade
    - Estrutura otimizada para LLMs
    - Fallback para contexto vazio
    
    üé® FORMATO DE SA√çDA:
    ```
    Conte√∫do do documento 1
    (fonte: arquivo1.txt)
    ---
    Conte√∫do do documento 2
    (fonte: arquivo2.md)
    ```
    
    Args:
        docs: Lista de documentos recuperados
        
    Returns:
        str: Contexto formatado para uso em prompt
    """
    if not docs:
        return "(sem contexto relevante encontrado)"
    
    formatted_parts = []
    for doc in docs:
        content = doc.page_content.strip()
        source = doc.metadata.get('source', 'fonte_desconhecida')
        formatted_parts.append(f"{content}\n(fonte: {source})")
    
    return "\n---\n".join(formatted_parts)
